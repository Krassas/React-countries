{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","alt","src","flag","name","capital","language","currency","CardList","countryData","cardComponent","map","data","i","lang","languages","languageName","curr","currencies","currencyName","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","filteredCountries","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6QAiBeA,G,YAdF,SAACC,GACV,OACI,yBAAKC,GAAG,WACJ,yBAAKC,IAAI,eAAeC,IAAKH,EAAMI,OACnC,yBAAKH,GAAG,QACJ,wBAAIA,GAAG,QAAQD,EAAMK,MACrB,wCAAcL,EAAMM,SACpB,yCAAeN,EAAMO,UACrB,yCAAeP,EAAMQ,cCuBtBC,G,MA9BE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAKTC,EAAgBD,EAAYE,KAAI,SAACC,EAAMC,GAGzC,IAAMC,EAAOF,EAAKG,UAAUJ,KAAI,SAACK,GAE7B,OAAOA,EAAaZ,QAIlBa,EAAOL,EAAKM,WAAWP,KAAI,SAACQ,GAE9B,OAAOA,EAAaf,QAIxB,OAAO,kBAAC,EAAD,CAAMgB,IAAKP,EAAGT,KAAMK,EAAYI,GAAGT,KAAMC,QAASI,EAAYI,GAAGR,QAASF,KAAMM,EAAYI,GAAGV,KAAMG,SAAUQ,EAAMP,SAAUU,OAG1I,OACI,yBAAKjB,GAAG,SACHU,KCjBEW,EAVG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,2BACAC,KAAK,SACLC,YAAY,mBACZC,SAAYH,KCyCLI,E,kDAzCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACXxB,YAAa,GACba,YAAa,IAJH,E,gEAQO,IAAD,OAClBY,MAAM,sFACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvB,GAAI,OAAI,EAAKkB,SAAS,CAACrB,YAAaG,S,+BAOlC,IAAD,OACD0B,EAAoBC,KAAKN,MAAMxB,YAAY+B,QAC/C,SAAA/B,GACE,OAAOA,EAAYL,KAAKqC,cAAcC,SAAS,EAAKT,MAAMX,YAAYmB,kBAI1E,OAAsC,IAAlCF,KAAKN,MAAMxB,YAAYkC,OAClB,wBAAI3C,GAAG,WAAP,WAIL,yBAAKA,GAAG,eACN,wBAAIA,GAAG,aAAP,aACA,yBAAKA,GAAG,aAAY,kBAAC,EAAD,CAAWuB,aAAcgB,KAAKX,eAAgB5B,GAAG,eACrE,kBAAC,EAAD,CAAUS,YAAa6B,S,GAlCfM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.928add3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../CSS/Card.css';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div id='content'>\r\n            <img alt=\"country flag\" src={props.flag} />\r\n            <div id=\"info\">\r\n                <h2 id=\"name\">{props.name}</h2>\r\n                <h4>Capital: {props.capital}</h4>\r\n                <h4>Language: {props.language}</h4>\r\n                <h4>Currency: {props.currency}</h4>\r\n            </div>        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport'../CSS/Cardlist.css';\r\n\r\nconst CardList = ({countryData}) => {\r\n    \r\n   \r\n    \r\n\r\n    const cardComponent = countryData.map((data, i) =>\r\n    {\r\n        \r\n        const lang = data.languages.map((languageName) => {\r\n\r\n            return languageName.name\r\n\r\n        })\r\n\r\n        const curr = data.currencies.map((currencyName) => {\r\n\r\n            return currencyName.name\r\n\r\n        })\r\n\r\n        return <Card key={i} name={countryData[i].name} capital={countryData[i].capital} flag={countryData[i].flag} language={lang} currency={curr}/>\r\n    }\r\n      )\r\n    return (\r\n        <div id=\"cards\">\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <input \r\n        type=\"search\" \r\n        placeholder='search countries' \r\n        onChange = {searchChange}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\nimport'../CSS/App.css';\nimport Cardlist from '../Components/Cardlist';\nimport SearchBox from '../Components/SearchBox';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      countryData: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://restcountries.eu/rest/v2/all?fields=name;capital;languages;currencies;flag')\n    .then(response => response.json())\n    .then(data => this.setState({countryData: data}))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value})\n  }\n\n  render() {\n    const filteredCountries = this.state.countryData.filter(\n      countryData => {\n        return countryData.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n      }\n    )\n    \n    if (this.state.countryData.length === 0) {\n      return <h1 id=\"loading\">Loading</h1>\n    } else {\n\n      return (\n        <div id=\"mainContent\">\n          <h1 id=\"mainTitle\">Countries</h1>\n          <div id=\"searchBox\"><SearchBox searchChange={this.onSearchChange} id=\"searchBox\"/></div>\n          <Cardlist countryData={filteredCountries}/>\n        </div>\n      );\n\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}